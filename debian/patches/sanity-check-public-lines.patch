From c93d8edb2645565930906323e7836028a35f2a97 Mon Sep 17 00:00:00 2001
From: Simon Tatham <anakin@pobox.com>
Date: Sat, 19 Jan 2019 07:40:07 +0000
Subject: Sanity-check the 'Public-Lines' field in ppk files.

If it's too large, memory allocation can fail, or worse,
under-allocate due to integer overflow.

Origin: backport, https://git.tartarus.org/?p=simon/putty.git;a=commitdiff;h=63a58759b5c0c11183726767a095f3a154b0f131
Last-Update: 2019-03-20

Patch-Name: sanity-check-public-lines.patch
---
 sshpubk.c | 35 ++++++++++++++++++++++++++++++++---
 1 file changed, 32 insertions(+), 3 deletions(-)

diff --git a/sshpubk.c b/sshpubk.c
index a4ecb9d5..b9d2a419 100644
--- a/sshpubk.c
+++ b/sshpubk.c
@@ -21,6 +21,18 @@
                           (x)=='+' ? 62 : \
                           (x)=='/' ? 63 : 0 )
 
+/*
+ * Fairly arbitrary size limit on any public or private key blob.
+ * Chosen to match AGENT_MAX_MSGLEN, on the basis that any key too
+ * large to transfer over the ssh-agent protocol is probably too large
+ * to be useful in general.
+ *
+ * MAX_KEY_BLOB_LINES is the corresponding limit on the Public-Lines
+ * or Private-Lines header field in a key file.
+ */
+#define MAX_KEY_BLOB_SIZE 262144
+#define MAX_KEY_BLOB_LINES (MAX_KEY_BLOB_SIZE / 48)
+
 static int loadrsakey_main(FILE * fp, struct RSAKey *key, int pub_only,
 			   char **commentptr, char *passphrase,
 			   const char **error)
@@ -521,6 +533,7 @@ static unsigned char *read_blob(FILE * fp, int nlines, int *bloblen)
     int i, j, k;
 
     /* We expect at most 64 base64 characters, ie 48 real bytes, per line. */
+    assert(nlines < MAX_KEY_BLOB_LINES);
     blob = snewn(48 * nlines, unsigned char);
     len = 0;
     for (i = 0; i < nlines; i++) {
@@ -567,6 +580,16 @@ const struct ssh_signkey *find_pubkey_alg(const char *name)
 	return NULL;
 }
 
+static int userkey_parse_line_counter(const char *text)
+{
+    char *endptr;
+    unsigned long ul = strtoul(text, &endptr, 10);
+    if (*text && !*endptr && ul < MAX_KEY_BLOB_LINES)
+        return ul;
+    else
+        return -1;
+}
+
 struct ssh2_userkey *ssh2_load_userkey(const Filename *filename,
 				       char *passphrase, const char **errorstr)
 {
@@ -646,8 +669,10 @@ struct ssh2_userkey *ssh2_load_userkey(const Filename *filename,
 	goto error;
     if ((b = read_body(fp)) == NULL)
 	goto error;
-    i = atoi(b);
+    i = userkey_parse_line_counter(b);
     sfree(b);
+    if (i < 0)
+        goto error;
     if ((public_blob = read_blob(fp, i, &public_blob_len)) == NULL)
 	goto error;
 
@@ -656,8 +681,10 @@ struct ssh2_userkey *ssh2_load_userkey(const Filename *filename,
 	goto error;
     if ((b = read_body(fp)) == NULL)
 	goto error;
-    i = atoi(b);
+    i = userkey_parse_line_counter(b);
     sfree(b);
+    if (i < 0)
+        goto error;
     if ((private_blob = read_blob(fp, i, &private_blob_len)) == NULL)
 	goto error;
 
@@ -890,8 +917,10 @@ unsigned char *ssh2_userkey_loadpub(const Filename *filename, char **algorithm,
 	goto error;
     if ((b = read_body(fp)) == NULL)
 	goto error;
-    i = atoi(b);
+    i = userkey_parse_line_counter(b);
     sfree(b);
+    if (i < 0)
+        goto error;
     if ((public_blob = read_blob(fp, i, &public_blob_len)) == NULL)
 	goto error;
 
